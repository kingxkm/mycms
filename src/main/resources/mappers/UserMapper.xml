<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.kingxkm.myssm.dao.UserDao">
	<!-- 为了返回list 类型而定义的returnMap -->
	<resultMap type="User" id="resultListUser">
		<id column="id" property="id" />
		<result column="userName" property="userName" />
		<result column="userAge" property="age" />
		<result column="userAddress" property="userAddress" />
	</resultMap>

	<!-- User 联合文章进行查询 方法之一的配置 (多对一的方式) -->
	<resultMap id="resultUserArticleList" type="Article">
		<id property="id" column="aid" />
		<result property="title" column="title" />
		<result property="content" column="content" />
		<association property="user" javaType="User">
			<id property="id" column="id" />
			<result property="userName" column="userName" />
			<result property="userAddress" column="userAddress" />
		</association>
	</resultMap>

	<select id="getUserArticles" parameterType="int" resultMap="resultUserArticleList">
		select u.id,u.userName,u.userAddress,a.id aid,a.title,a.content from
		t_user u,t_article a
		where u.id=a.userid and u.id=#{id}
	</select>

	<select id="getUser" parameterType="int" resultType="User">
		select id,
		userAge as age, userName,userAddress
		from t_user
		where id = #{id}

	</select>

	<!-- 返回list 的select 语句，注意 resultMap 的值是指向前面定义好的 -->
	<select id="getUserList" parameterType="string" resultType="map">
		select id,userName,userAge as age,userAddress from t_user where
		userName like "%"#{userName}"%"
	</select>


	<!-- 查询用户,演示: 1.输入用map传入多个参数 2.<where>语句, 智能添加where和and关键字 3.输出直接映射对象 -->
	<select id="search" parameterType="map" resultType="User">
		select id, name, email,
		login_name as loginName,
		from t_user
		<where>
			<if test="loginName != null">
				login_name=#{loginName}
			</if>
			<if test="name != null">
				and name=#{name}
			</if>
		</where>
	</select>
	<!-- 插入用户： 1.由数据库生成id并赋值到user对象 2.输入用对象, 嵌套属性表达式#{team.id} -->
	<insert id="save" parameterType="User" useGeneratedKeys="true"
		keyProperty="id">
		insert into t_user (
		username, userage, useraddress)
		values
		(#{userName}, #{age}, #{userAddress})

	</insert>

	<update id="update" parameterType="User">
		update t_user set
		userName=#{userName},userAge=#{age},userAddress=#{userAddress}
		where
		id=#{id}
	</update>

	<!-- 删除用户 -->
	<delete id="delete" parameterType="int">
		delete from t_user where
		id=#{id}
	</delete>
</mapper>